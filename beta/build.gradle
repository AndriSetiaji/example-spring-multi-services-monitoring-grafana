plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.ans'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

//repositories {
//	mavenCentral()
//	maven {
//		url uri("/home/ans/Documents/code/repo") // Path to local dir repo
//	}
//}
repositories {
	mavenCentral() // Repository utama
	maven {
		name = "nexusLocal"
		url = uri("http://localhost:18081/repository/maven-releases/") // Replace with "maven-snapshots" for snapshot builds
		allowInsecureProtocol = true
		credentials {
			username = "admin" // Default admin user
			password = "admin" // Replace with your password
		}
	}
}

dependencies {
	// Core application dependency
	implementation 'org.ans.test:common:1.4.4-dev'

	// Spring Boot starters
	implementation 'org.springframework.boot:spring-boot-starter-web' // Web starter for building REST APIs
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // Spring Data JPA for database access
	implementation 'org.springframework.boot:spring-boot-starter-actuator' // Actuator for monitoring and management

	// Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0' // OpenFeign for declarative REST clients

	// Micrometer dependencies
	runtimeOnly 'io.micrometer:micrometer-registry-otlp' // OpenTelemetry metrics registry
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus' // Prometheus metrics registry
	implementation 'io.micrometer:micrometer-tracing-bridge-otel' // OpenTelemetry tracing bridge

	// OpenTelemetry dependencies
	implementation 'io.opentelemetry:opentelemetry-api:1.29.0' // OpenTelemetry API
	implementation 'io.opentelemetry:opentelemetry-context:1.29.0' // OpenTelemetry context management
	implementation 'io.opentelemetry:opentelemetry-sdk:1.29.0' // OpenTelemetry SDK
	implementation 'io.opentelemetry:opentelemetry-sdk-common:1.29.0' // Common SDK components
	implementation 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:1.29.0' // Autoconfigure SPI extension
	implementation 'io.opentelemetry:opentelemetry-sdk-metrics:1.29.0' // OpenTelemetry metrics SDK
	implementation 'io.opentelemetry:opentelemetry-sdk-trace:1.29.0' // OpenTelemetry tracing SDK
	implementation 'io.opentelemetry:opentelemetry-extension-trace-propagators:1.29.0' // Trace propagators extension
	implementation 'io.opentelemetry:opentelemetry-exporter-common:1.29.0' // Common exporter components
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.29.0' // OTLP exporter
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp-common:1.29.0' // Common OTLP exporter components
	implementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv:1.29.0-alpha' // Semantic conventions for instrumentation
	implementation 'io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:1.29.0-alpha' // Logback appender for OpenTelemetry

	// Database
	implementation 'org.postgresql:postgresql:42.6.0' // PostgreSQL driver for database connectivity

	// Servlet API
	implementation 'javax.servlet:javax.servlet-api:4.0.1' // Servlet API for web development

	// Aspect-oriented programming
	implementation 'org.aspectj:aspectjweaver:1.9.20'

	// Lombok for reducing boilerplate code
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // Spring Boot test starter
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // JUnit platform launcher

	// rest template
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'com.alibaba:fastjson:1.2.83'
}

tasks.named('test') {
	useJUnitPlatform()
}
